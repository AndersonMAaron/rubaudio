#!/usr/bin/env ruby

###############################################################################
## Queries video files for spikes in the audio lasting longer than MIN_SPIKE_DURATION
###############################################################################

require 'logger'
require 'optparse'
require 'pp'

MIN_SPIKE_DURATION = 1 #second(s)
@options = { :log_level => 'info' }

OptionParser.new do |opts|
  opts.banner = [
    "usage: #{File.basename($0)}",
    "-d <dir>",
    "[-l <log-level>]",
    "[-h]",
  ].join(' ')

  opts.on( '-d', '--video-directory DIRNAME', "Directory to write the RPMs" ) do |dir|
    @options[:video_directory] = File.expand_path(dir)
  end

  opts.on('-l', '--log-level <level>', 'log level verbosity (fatal, error, warn, info, debug). Defaults to error.') do |log_level|
    @options[:log_level] = log_level
  end

  opts.on('-h', '--help', 'flag to display help') do
    abort(opts)
  end
end.parse!

def fail(msg = '')
  notes = [
    @parser.banner,
  ]
  notes << msg unless msg.empty?

  abort(notes.join("\n"))
end

fail("Need to specify --video-directory (-d)") unless @options[:video_directory]
fail("--video-directory (-d) '#{@options[:video_directory]}' not found") unless File.exist?(@options[:video_directory])

@logger = Logger.new(STDERR)
log_level = @options[:log_level]
@logger.formatter = proc { |severity, datetime, progname, msg| "#{datetime. strftime('%H:%M:%S.%L')} #{"%-5s" % severity} [#{progname}] #{msg}\n" }
@script_name = File.basename($0, ".rb")

def find_spikes(video_file)
  spikes = []
  # TODO populate 'spikes' array
  spikes
end

results = {}
Dir.glob("#{@options[:video_directory]}/*").each do |video_file|
  @logger.debug(@script_name) { "checking for audio spikes in '#{video_file}'" }
  results[video_file] = find_spikes(video_file)
end

@logger.info(@script_name) { "Spikes: \n#{pp results}" }
@logger.info(@script_name) { 'done' }
